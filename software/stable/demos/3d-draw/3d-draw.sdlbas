'- 3d Drawing demo - 040803 - sdlBasic version - Paulo Silva
'- (3d algorythms based on Michel Rousselet codes for zx-spectrum )
'- bug: xobs position value looks reverted (=*-1) (needs a deep review)
'- bugfix from Vroby: div0 error in angulo() function

common xobs,yobs,zobs,xtgt,ytgt,ztgt,qdst,zoom
radiano=57.2957792

wdwd=1
xedge=512:yedge=384
  setdisplay(xedge,yedge,32,wdwd)
screen(0)
  ink(0x202080):pen(0x202080):paper(0xA0A0A0):cls
expctw=640:expctf=xedge/expctw

'-- funcoes

function absv(n)
   absv=n:if n<0 then:absv=n*-1:end if
 end function

function eucl(x1,y1,z1)
   x1=abs(x1):y1=abs(y1):z1=abs(z1)
   eucl=sqr((x1^2)+(y1^2)+(z1^2))
 end function

function pitag(x2,y2)
    x2=abs(x2):y2=abs(y2)
  if ((x2^2)+(y2^2))<>0 then:pitag=sqr((x2^2)+(y2^2))
   else:pitag=0:end if
end function

function angulo(xe,ye)
       tmprq=0
   if xe<=0 and ye<=0 then:tmprq=3:end if
   if xe<=0 and ye>=0 then:tmprq=4:end if
   if xe>=0 and ye>=0 then:tmprq=1:end if
   if xe>=0 and ye<=0 then:tmprq=2:end if
     quadt=tmprq:dptg=pitag(xe,ye)
   if dptg<>0 then: v=asin(abs(xe)/dptg):else:v=0:end if
      tmpr=v*57.2957792:tmpr2=tmpr
   if quadt=2 then:tmpr2=180-tmpr:end if
   if quadt=3 then:tmpr2=180+tmpr:end if
   if quadt=4 then:tmpr2=360-tmpr:end if
      angulo=tmpr2
 end function

function xfrom3d(x1,y1,z1)
   xdn=x1-xobs:ydn=y1-yobs:zdn=z1-zobs
     xvn=xtgt-xobs:yvn=ytgt-yobs:zvn=ztgt-zobs
   rdnang=angulo(xdn,ydn):rdndist=pitag(xdn,ydn)
     rvnang=angulo(xvn,yvn):rvndist=pitag(xvn,yvn)
   rdnang=rdnang-rvnang:rvnang=0
     xdn=sin(rdnang/radiano)*rdndist:ydn=cos(rdnang/radiano)*rdndist
     xvn=0:yvn=rvndist
   rdnang=angulo(zdn,ydn):rdndist=pitag(zdn,ydn)
     rvnang=angulo(zvn,yvn):rvndist=pitag(zvn,yvn)
   rdnang=rdnang-rvnang:rvnang=0
     zdn=sin(rdnang/radiano)*rdndist:ydn=cos(rdnang/radiano)*rdndist
     xproj=(xedge/2)+(zoom*((qdst*xdn)/ydn))
     yproj=(yedge/2)+(zoom*((qdst*zdn)/ydn))
      xfrom3d=xproj
 end function

function yfrom3d(x1,y1,z1)
   xdn=x1-xobs:ydn=y1-yobs:zdn=z1-zobs
     xvn=xtgt-xobs:yvn=ytgt-yobs:zvn=ztgt-zobs
   rdnang=angulo(xdn,ydn):rdndist=pitag(xdn,ydn)
     rvnang=angulo(xvn,yvn):rvndist=pitag(xvn,yvn)
   rdnang=rdnang-rvnang:rvnang=0
     xdn=sin(rdnang/radiano)*rdndist:ydn=cos(rdnang/radiano)*rdndist
     xvn=0:yvn=rvndist
   rdnang=angulo(zdn,ydn):rdndist=pitag(zdn,ydn)
     rvnang=angulo(zvn,yvn):rvndist=pitag(zvn,yvn)
   rdnang=rdnang-rvnang:rvnang=0
     zdn=sin(rdnang/radiano)*rdndist:ydn=cos(rdnang/radiano)*rdndist
     xproj=(xedge/2)+(zoom*((qdst*xdn)/ydn))
     yproj=(yedge/2)+(zoom*((qdst*zdn)/ydn))
      yfrom3d=yproj
 end function

Sub Rect3d_xy(xc1,yc1,xc2,yc2,zc1)
   x1=xfrom3d(xc1,yc1,zc1):y1=yfrom3d(xc1,yc1,zc1)
    x2=xfrom3d(xc2,yc1,zc1):y2=yfrom3d(xc2,yc1,zc1)
    x3=xfrom3d(xc2,yc2,zc1):y3=yfrom3d(xc2,yc2,zc1)
    x4=xfrom3d(xc1,yc2,zc1):y4=yfrom3d(xc1,yc2,zc1)
   line (x1,y1,x2,y2):line (x2,y2,x3,y3)
    line (x3,y3,x4,y4):line (x4,y4,x1,y1)
 End Sub

'--- programa
while 0=0:zoom=96*expctf
   xm1=(xmouse-(xedge/2))*-(1/expctf):ym1=(ymouse-(yedge/2))*(1/expctf)
     xobs=xm1:yobs=150:zobs=ym1:xtgt=0:ytgt=0:ztgt=0:qdst=10
   cls:for zz=-20 to 20 step 5
       Rect3d_xy(-20,-20,20,20,zz):next
     locate(0,0):prints("xobs:"+str$(xobs))
     locate(0,1):prints("yobs:"+str$(yobs))
     locate(0,2):prints("zobs:"+str$(zobs))
   waitvbl:if key(27)<>0 then:end:end if
 wend
Offline
